// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: proto/simon_module.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SimonInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Color         Color                  `protobuf:"varint,1,opt,name=color,proto3,enum=common.Color" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SimonInput) Reset() {
	*x = SimonInput{}
	mi := &file_proto_simon_module_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimonInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimonInput) ProtoMessage() {}

func (x *SimonInput) ProtoReflect() protoreflect.Message {
	mi := &file_proto_simon_module_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimonInput.ProtoReflect.Descriptor instead.
func (*SimonInput) Descriptor() ([]byte, []int) {
	return file_proto_simon_module_proto_rawDescGZIP(), []int{0}
}

func (x *SimonInput) GetColor() Color {
	if x != nil {
		return x.Color
	}
	return Color_RED
}

type SimonInputResult struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	HasFinishedSeq  bool                   `protobuf:"varint,1,opt,name=has_finished_seq,json=hasFinishedSeq,proto3" json:"has_finished_seq,omitempty"`
	DisplaySequence []Color                `protobuf:"varint,2,rep,packed,name=display_sequence,json=displaySequence,proto3,enum=common.Color" json:"display_sequence,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SimonInputResult) Reset() {
	*x = SimonInputResult{}
	mi := &file_proto_simon_module_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimonInputResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimonInputResult) ProtoMessage() {}

func (x *SimonInputResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_simon_module_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimonInputResult.ProtoReflect.Descriptor instead.
func (*SimonInputResult) Descriptor() ([]byte, []int) {
	return file_proto_simon_module_proto_rawDescGZIP(), []int{1}
}

func (x *SimonInputResult) GetHasFinishedSeq() bool {
	if x != nil {
		return x.HasFinishedSeq
	}
	return false
}

func (x *SimonInputResult) GetDisplaySequence() []Color {
	if x != nil {
		return x.DisplaySequence
	}
	return nil
}

type SimonState struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CurrentSequence []Color                `protobuf:"varint,1,rep,packed,name=current_sequence,json=currentSequence,proto3,enum=common.Color" json:"current_sequence,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SimonState) Reset() {
	*x = SimonState{}
	mi := &file_proto_simon_module_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimonState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimonState) ProtoMessage() {}

func (x *SimonState) ProtoReflect() protoreflect.Message {
	mi := &file_proto_simon_module_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimonState.ProtoReflect.Descriptor instead.
func (*SimonState) Descriptor() ([]byte, []int) {
	return file_proto_simon_module_proto_rawDescGZIP(), []int{2}
}

func (x *SimonState) GetCurrentSequence() []Color {
	if x != nil {
		return x.CurrentSequence
	}
	return nil
}

var File_proto_simon_module_proto protoreflect.FileDescriptor

const file_proto_simon_module_proto_rawDesc = "" +
	"\n" +
	"\x18proto/simon_module.proto\x12\amodules\x1a\x12proto/common.proto\"1\n" +
	"\n" +
	"SimonInput\x12#\n" +
	"\x05color\x18\x01 \x01(\x0e2\r.common.ColorR\x05color\"v\n" +
	"\x10SimonInputResult\x12(\n" +
	"\x10has_finished_seq\x18\x01 \x01(\bR\x0ehasFinishedSeq\x128\n" +
	"\x10display_sequence\x18\x02 \x03(\x0e2\r.common.ColorR\x0fdisplaySequence\"F\n" +
	"\n" +
	"SimonState\x128\n" +
	"\x10current_sequence\x18\x01 \x03(\x0e2\r.common.ColorR\x0fcurrentSequenceB\tZ\a./protob\x06proto3"

var (
	file_proto_simon_module_proto_rawDescOnce sync.Once
	file_proto_simon_module_proto_rawDescData []byte
)

func file_proto_simon_module_proto_rawDescGZIP() []byte {
	file_proto_simon_module_proto_rawDescOnce.Do(func() {
		file_proto_simon_module_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_simon_module_proto_rawDesc), len(file_proto_simon_module_proto_rawDesc)))
	})
	return file_proto_simon_module_proto_rawDescData
}

var file_proto_simon_module_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_simon_module_proto_goTypes = []any{
	(*SimonInput)(nil),       // 0: modules.SimonInput
	(*SimonInputResult)(nil), // 1: modules.SimonInputResult
	(*SimonState)(nil),       // 2: modules.SimonState
	(Color)(0),               // 3: common.Color
}
var file_proto_simon_module_proto_depIdxs = []int32{
	3, // 0: modules.SimonInput.color:type_name -> common.Color
	3, // 1: modules.SimonInputResult.display_sequence:type_name -> common.Color
	3, // 2: modules.SimonState.current_sequence:type_name -> common.Color
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_proto_simon_module_proto_init() }
func file_proto_simon_module_proto_init() {
	if File_proto_simon_module_proto != nil {
		return
	}
	file_proto_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_simon_module_proto_rawDesc), len(file_proto_simon_module_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_simon_module_proto_goTypes,
		DependencyIndexes: file_proto_simon_module_proto_depIdxs,
		MessageInfos:      file_proto_simon_module_proto_msgTypes,
	}.Build()
	File_proto_simon_module_proto = out.File
	file_proto_simon_module_proto_goTypes = nil
	file_proto_simon_module_proto_depIdxs = nil
}
